Question- 
m == matrix.length
n == matrix[i].length
1 <= m, n <= 300
matrix[i][j] is '0' or '1'.
Constraints:
Input: matrix = [["0"]]
Output: 0

Answer-
# Helper function to find the maximum area under a histogram
def max_area_histogram(row):
    # Initialize a stack to store the indices of the bars
    stack = []
    # Initialize the maximum area
    max_area = 0
    # Loop through the row
    for i, height in enumerate(row):
        # If the stack is empty or the current height is greater than or equal to the top of the stack
        if not stack or height >= row[stack[-1]]:
            # Push the current index to the stack
            stack.append(i)
        # Otherwise
        else:
            # Pop the top of the stack and calculate the area with that bar as the smallest bar
            top = stack.pop()
            area = row[top] * (i - stack[-1] - 1 if stack else i)
            # Update the maximum area if needed
            max_area = max(max_area, area)
            # Repeat until the current height is greater than or equal to the top of the stack
            i -= 1
    # After the loop, pop the remaining bars from the stack and calculate the area with them as the smallest bar
    while stack:
        top = stack.pop()
        area = row[top] * (len(row) - stack[-1] - 1 if stack else len(row))
        # Update the maximum area if needed
        max_area = max(max_area, area)  
# Return the maximum area
    return max_area
# Main function to find the maximum area of 1's in a matrix
def maximal_rectangle(matrix):
    # If the matrix is empty, return 0
    if not matrix or not matrix[0]:
        return 0
    # Get the number of rows and columns
    m = len(matrix)
    n = len(matrix[0])
    # Initialize the global maximum area
    max_area = 0
    # Loop through the rows
    for i in range(m):
        # Convert the elements to integers
        matrix[i] = list(map(int, matrix[i]))
        # If it is not the first row, update the row by adding the previous row if the element is 1
        if i > 0:
            for j in range(n):
                if matrix[i][j] == 1:
                    matrix[i][j] += matrix[i - 1][j]
        # Find the maximum area under the histogram formed by the current row
        area = max_area_histogram(matrix[i])
        # Update the global maximum area if needed
        max_area = max(max_area, area)
    # Return the global maximum area
    return max_area
